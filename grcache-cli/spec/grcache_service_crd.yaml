apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: grcacheservices.hansihe.com
spec:
  group: hansihe.com
  names:
    categories: []
    kind: GrcacheService
    plural: grcacheservices
    shortNames: []
    singular: grcacheservice
  scope: Namespaced
  versions:
  - additionalPrinterColumns: []
    name: v1
    schema:
      openAPIV3Schema:
        description: Auto-generated derived type for GrcacheServiceSpec via `CustomResource`
        properties:
          spec:
            properties:
              cluster:
                default: default
                description: A `grcache` deployment will only pull resources with the same `cluster` name as itself. If unset, this defaults to `default`.
                type: string
              descriptorSetSource:
                description: Caching config for RPC methods are declared inline in the proto files. In order to be able to cache, we need the descriptors for the protos which contain the service. If not specified, no caching will be performed, `grcache` will be in proxy mode only.
                nullable: true
                oneOf:
                - required:
                  - file
                - required:
                  - bucket
                - required:
                  - inline
                properties:
                  bucket:
                    properties:
                      hash:
                        description: Hash of the desctiptor set file. Will be used to generate the object name in the bucket.
                        type: string
                      name:
                        description: Refers to a bucket name from the main `grcache` config file.
                        type: string
                    required:
                    - hash
                    - name
                    type: object
                  file:
                    properties:
                      path:
                        description: Path to the descriptor set file on the local filesystem.
                        type: string
                    required:
                    - path
                    type: object
                  inline:
                    properties:
                      data:
                        description: Base64 encoded descriptor set binary. Subject to API server size limits, use with caution.
                        type: string
                    required:
                    - data
                    type: object
                type: object
              serviceName:
                description: The name of the gRPC service. This should match the name of the gRPC service specified in your proto file, including the full package path. When making a request to the grcache proxy, `service_name` + optionally `upstream_name` will decide which upstream server this request goes to.
                type: string
              upstream:
                description: Declares how upstreams are resolved for this service.
                oneOf:
                - required:
                  - dns
                properties:
                  dns:
                    description: |-
                      DNS will be used to resolve the upstreams.

                      We are a good DNS service discovery citizen, and will: * Periodically refresh upstreams based on DNS TTLs. * Load balance between different upstreams.

                      You should be able to point `grcache` at a k8s service (or other DNS based service discovery) and expect things to mostly just work.
                    properties:
                      port:
                        default: 50051
                        format: uint16
                        minimum: 0.0
                        type: integer
                      url:
                        type: string
                    required:
                    - url
                    type: object
                type: object
              upstreamName:
                description: For the case when a single gRPC service is implemented on multiple upstreams, this option can be used. When no upstream name is specified in the gRPC request headers, it defaults to the service spec with no upstream name. If more than one `GrcacheService` is declared for each permutation of (service_name, upstream_name), validation errors will occur. For 99% of cases this should not be set.
                nullable: true
                type: string
            required:
            - serviceName
            - upstream
            type: object
        required:
        - spec
        title: GrcacheService
        type: object
    selectableFields:
    - jsonPath: .spec.cluster
    served: true
    storage: true
    subresources: {}
